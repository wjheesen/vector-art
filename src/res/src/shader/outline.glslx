precision mediump float;

uniform mat4 projection;         // Projection matrix (maps from world space to clip space)
uniform vec4 color;              // Color of outline
uniform float lineWidth;         // Width of lines making up outline
attribute mat2 model;            // Model matrix (maps from model space to world space)
attribute vec2 offset;           // Third column of model matrix
attribute vec2 position;         // Position of current vertex in model space
attribute vec2 miter;            // The miter to apply to this vertex

export void vertex(){
    float miterLength = length(miter) * lineWidth;
    vec2 rotatedMiter = miterLength == 0.0 ? miter : miterLength * normalize(model * miter);
    vec2 worldPosition = (model * position) + offset + rotatedMiter;
    gl_Position = projection * vec4(worldPosition, 1.0, 1.0);
}

export void fragment(){
    gl_FragColor = color;
}